# -*- coding: utf-8 -*-
"""Actividad2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qJ0_YWtGX53p889b_Kr2Z7yN615L3_qm

# **Actividad 2**
# Esquivel Ovilla José Aarón

# **Ejercicio 1**


# Código para obtener el área de un círculo 

Fórmula:

**$A=\pi r^2$**
"""

import numpy as np

# programa para calcular el área de un círculo.  
#formula para calcular el area del circulo 
def ac(x):
    return np.pi *x**2
#pedimos al usuario que nos de el radio del circulo
print("¿cual es el radio del círculo?: ")
r=float(input())
ac=ac(r)
print("\nArea = {:.2f}".format(ac))

"""# Código para obtener el área de una elipse
Fórmula:

$A=\pi ab $
"""

#Codigo para calcular el area de una elipse 
#formula para calcular el area de la elipse 
def ae(x,y):
  return x*y*np.pi 

print("¿Cual es el valor del semieje mayor de la elipse y del semieje menor:")
a=float(input()) #Semieje mayor de la elipse a calcular
b=float(input()) #Semieje menor de la elipse a calcular

ae=ae(a,b)

print("\nEl área de la elipse es: {:.2f}".format(ae))

"""# Código para obtener el volumen de un esfera
Fórmula:

$V=\frac{4}{3}\pi r^3$

"""

#Codigo para calcular el volumen de una esfera.
#formula para calcular el volumen de la esfera
def v(x):
  return 4/3*np.pi*x**3 

print("Cual es el radio de la esfera:")
r=float(input()) 

v=v(r)

print("\nVolumen de la esfera es: {:.2f}".format(v))

"""# Código para obtener el volumen de un cilindro circular

Fórmula:

$V=\pi r^2 h$
"""

#codigo para calcular el volumen de un cilindro circular 
def v(x,y):
  return (np.pi * r**2)*h

print("Proporciones el radio y la altura del cilindro")
#radio del cilindro circular
r=float(input())

#altura del cilindro circular
h=float(input())

v=v(r,h)

print("\nEl volumen del cilindro circular es: {:.2f}".format(v))

"""# **Ejercicio 2**
# Código para calcular la raíces de una ecuación cuadrática 

Fórmula:

$\frac{-b \pm \sqrt{b^2-4ac}}{2a}$

"""

#codigo para calcular las raices de una ecuacion cuadratica
#primero le pediremos al usuario que nos proporcione los coeficientes de la ecuacion cuadratica 
print("Proporca los valores de los coeficientes")
print("ax^2+bx+c")
a=float(input())
b=float(input())
c=float(input())

d=b**2-4*a*c

if d > 0:
    
    X=((-b)+r)/(2*a)
    Y=((-b)-r)/(2*a)
    print("\nRaices = ", X , Y)
    
    print("\nRaíz 1 = {:.4f}" .format(X))
    print("\nRaíz 2 = {:.4f}" .format(Y))
elif (d==0):
    X=((-b)+r)/(2*a)
    Y=((-b)-r)/(2*a)
    print("\nRaices = ", X , Y)
    
    print("\nRaíz 1 = {:.4f}" .format(X))
    print("\nRaíz 2 = {:.4f}" .format(Y))

else:
    print("Las raices de esta ecuación son de números complejos")

"""# **Ejercicio 3**
# Implementar el método Babilonio (o Método de Herón), para calcular la raíz cuadrada de un número S

Fómula:

$x_{0}\approx\sqrt{S}$

$x_{n+1}=\frac{1}{2}(x_n+\frac{S}{x_n})$

$\sqrt{S}\lim\limits_{n\to\infty} x_{n}$
"""

#codigo para calcular la raiz cuadrada de un numero S usando el metodo babilonio 
#pediremos que el usuario nos proporciones un valor de S
import numpy as np

print("\n¿Que valor de S desea calcular?:")

s=float(input())
#calculando la raiz con la funcion np
sr=np.sqrt(s)
print("\nProporcione un valor inicial x0:")

x0=float(input())
#calculando la raiz con el metodo babilonio 
i=1
ap=1/2*(x0+(s/x0))

while abs(s-ap) > 0.01:
  print("Ciclo", i, ":", ap)
  ap=1/2*(ap+(s/ap))
  i=i+1
  #hacemo que corra 100 veces
  if i >= 51: 
    break
#cuando se pase de 101 se detiene 
print("El valor aproximado de la raiz de ", s, "es:", ap, ". \nY su error es de:", abs(np.sqrt(s)-ap))

"""# Ejercicio 4
 Reproduce la figura que aparece inmediatamente abajo en el artículo de Wikipedia sobre Series de Taylor, que muestra la aproximación de la función ln(1+x) alrededor de x=0

 $ln(1+x)=\displaystyle\sum_{n=1}^\infty (-1)^{n+1}\frac{x^n}{n}=x-\frac{x^2}{2}+\frac{3^3}{3}+\cdots$
"""

#Primero importamos las librerias:
import numpy as np
import matplotlib.pyplot as plt #Para graficar

print("Este programa esta disenado para aproximar la funcion ln(1+x) usando la serie de Taylor para esa funcion en especifico.")

print("\nIntroduzca un primer valor para el polinomio")
n=int(input())
x=np.linspace(-1.5,1.5,100)

#primer valor del polinomio
aux1=0.0 
for i in range(1,n+1,1):
  p1=aux1+((-1)**(i+1))*(x**i/i)
  aux1=p1
#obtenemos el primer valor del polinomio 

#segundo valor del polinomio
print("\nIntroduzca un segundo valor para el polinomio:")
#n2= segudno valor que obtendra el polinomio
n2=int(input())
#variable auxiliar que se usara para el segundo valor
aux2=0.0
for i in range(1,n2+1,1):
  p2=aux2+((-1)**(i+1))*(x**i/i)
  aux2=p2
#obtenemos el segundo valor del polinomio


#tercer valor del polinomio
print("\nIntroduzca un tercer valor:")
#n3= el tercer valor que obtendra el polinomio
n3=int(input())
#variable auxiliar que se usara para el tercer valor 
aux3=0.0  
for i in range(1,n3+1,1):
  p3=aux3+((-1)**(i+1))*(x**i/i)
  aux3=p3
#obtenemos el tercer valor del polinomio

#cuarto valor para el polinomio
print("\nIntroduzca un cuarto valor para el polinomio:")
#n4= cuarto valor que obtendra el polinomio
n4=int(input())
#variable auxiliar que se usara para el cuarto valor 
aux4=0.0
for i in range(1,n4+1,1):
  p4=aux4+((-1)**(i+1))*(x**i/i)
  aux4=p4
#obtenemos el cuarto valor del polinomio

#base de la  grafica final
plt.subplot(111)
plt.xlabel("X")
plt.ylabel("Y")

#comandos para poder graficar los resultados de los polinomios
plt.plot(x,p1, label="T4")
plt.plot(x,p2, label="T7")
plt.plot(x,p3, label="T11")
plt.plot(x,p4, label="T16")
plt.plot(x,np.log(1+x), label="ln(1+x)")
#comando para poder agragar una malla a la grafica 
plt.grid(True)
#comando para poder fijar los limites que tomara Y
plt.ylim(-4, 2)
#comando para poner una ubicacion a las etiquetas 
plt.legend(bbox_to_anchor=(1,1), loc="upper left")

plt.show()

"""# **Ejemplos**

A continuación se mostraran algunos ejemplos vistos en clase

# Ejemplo usando condicional:if
"""

x = 3

y = 2

z = 3

if x == y:

     print("Hola")

elif x == z:

     print("Hasta luego")

else:

     print("que es eso")

"""# Ejemplo usando Loop: for """

print("hola")

for i in range(5): # default - comienza en 0, incrementa en 1

     print(i)
#no se detiene en el 5 , se detiene en el 4
 

print("\nadios")

for i in range(5, 2, -2): # entradas: inicio, fin, tamaño de paso 

     print(i)

"""# Ejemplo usando Loop: while"""

i = 1
#empezamos con un contador i
while i < 100:

     print(i**2)

     i += i**2 # a += b es notación compacta de a = a + b

"""# Ejemplos de: continue y break"""

for num in range(2, 10):

     if num % 2 == 0:

          continue # se regresa al inicio

     print(f"Encontrado {num}, un número impar")

n = 64

for x in range(2, n):

     if n % x == 0: # si n es divisible por x (modulo 0)

          print(f'{n} igual {x} * {n // x}')

          break

for i in range(5):

     for j in range(5*i):

          if j == 10:

               print(j)

               break

#break se va a esta línea


if False:

     pass # no hace nada, continua

else:

     print('True!')

"""# Listas (conjunto de objetos)"""

lista1 = [1,2,3.0,15]

lista2 = [1.,2,'3',4]

print(lista1)

print(lista2)

print(lista1+lista2)

"""Arreglos (vectores n-dimensionales)

Construcción de un arreglo
"""

s1 = np.array([1,2,3,4])      # Arreglo de enteros

s2 = np.array([1,2,3,4.0])   # Un número flotante convierte al arreglo a flotante

s3 = np.array([1,2,3,'4'])    # Un arreglo con un carácter, convierte a todo el arreglo de caracteres. 

s4 = np.arange(0,5,0.5)     # Inserta puntos cada 0.5 entre 0 y 5, pero no incluye el extremo superior

s5 = np.linspace(0,5,20)    # Inserta 20 puntos entre 0 y 5, incluyendo extremos

# Cargar la subbiblioteca pytlot de Matplotlib 
#esto es importante ya que nos permitira graficar 
import matplotlib.pyplot as plt


# Gráfica de funciones
# Definición de variables y funciones

x = np.linspace(-np.pi,np.pi,100)  # arrego de 100 puntos entre -pi y pi

y = np.sin(x)      # y será también un arreglo de 100 puntos automáticamente 

y1 = x

y3 = x**3/(3*2)

y5 = x**5/(5*4*3*2)

sT = y1 - y3 + y5 # Serie de Taylor de sin(x) a 5o. Orden.
# Creación de la gráficas

plt.subplot(111)

plt.xlabel("X label")

plt.ylabel("Y label")

#comando para ponerle un titulo a la grafica
plt.title("Title")


# Graficar varias funciones
#ejemplo de graficar varias funciones 
plt.plot(x,y, label="sin(x)")

plt.plot(x,y1, label='x')

plt.plot(x,sT, label='Serie Taylor Orden 5')

# comando para poder agregar una malla a la grafica 
plt.grid(True)

# comando para poder fijar los limites en el eje Y
plt.ylim(-2, 2)


#Comando para poner la ubicación de las etiquetas de las funciones
plt.legend(bbox_to_anchor=(1,1), loc="upper left")

plt.show()

#plt.savefig('plot.png')  # Si se desea guardar en un archivo la imagen de la gráfica